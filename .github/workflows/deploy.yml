name: deploy-minecraft

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read

env:               
  TF_BUCKET: acme-mc-tfstate
  TF_DDB:    acme-mc-tf-lock
  TF_KEY:    dev/terraform.tfstate
  TF_REGION: us-east-1

jobs:
  terraform:
    runs-on: ubuntu-latest
    outputs:
      cluster:  ${{ steps.out.outputs.cluster }}
      service:  ${{ steps.out.outputs.service }}

    steps:
      - uses: actions/checkout@v4

      # configure AWS with learner lab creds
      - uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token:     ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region:            ${{ secrets.AWS_REGION }}

      #   state backend â€“ idempotent
      - name: "Create S3 bucket + DynamoDB table if missing"
        run: |
          set -euxo pipefail

          # S3 bucket
          if ! aws s3api head-bucket --bucket "$TF_BUCKET" 2>/dev/null; then
            if [ "$TF_REGION" = "us-east-1" ]; then
              aws s3api create-bucket \
                --bucket "$TF_BUCKET"
            else
              aws s3api create-bucket \
                --bucket "$TF_BUCKET" \
                --create-bucket-configuration LocationConstraint="$TF_REGION"
            fi

            aws s3api put-bucket-versioning \
              --bucket "$TF_BUCKET" --versioning-configuration Status=Enabled

            sleep 5
          fi

          if ! aws dynamodb describe-table --table-name "$TF_DDB" >/dev/null 2>&1; then
            aws dynamodb create-table \
              --table-name "$TF_DDB" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST

              sleep 5
          fi

      # terraform
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.0

      - run: |
          cd infra
          terraform init -input=false
          terraform fmt -check && terraform validate
          terraform apply -input=false -auto-approve 
          
      - id: out
        run: |
          cd infra
          echo "cluster=$(terraform output -raw ecs_cluster_name)" >> "$GITHUB_OUTPUT"
          echo "service=$(terraform output -raw service_name)"    >> "$GITHUB_OUTPUT"

  smoke_test:
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token:     ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Install nmap
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends nmap

      - name: Wait for service & test :25565
        run: |
          set -euo pipefail
          CLUSTER="${{ needs.terraform.outputs.cluster }}"
          SERVICE="${{ needs.terraform.outputs.service }}"

          aws ecs wait services-stable --cluster "$CLUSTER" --services "$SERVICE"

          TASK=$(aws ecs list-tasks \
                   --cluster "$CLUSTER" --service-name "$SERVICE" \
                   --desired-status RUNNING --query 'taskArns[0]' --output text)

          ENI=$(aws ecs describe-tasks --cluster "$CLUSTER" --tasks "$TASK" \
                   --query "tasks[0].attachments[0].details[?name=='networkInterfaceId'].value" --output text)

          IP=$(aws ec2 describe-network-interfaces \
                 --network-interface-ids "$ENI" \
                 --query "NetworkInterfaces[0].Association.PublicIp" --output text)

          echo "Testing $IP:25565 after waiting 60s"
          sleep 60
          nmap -sV -Pn -p 25565 "$IP"
